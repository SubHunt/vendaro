# Generated by Django 5.2.7 on 2025-10-04 11:22

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("stores", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="created"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="updated"),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="is deleted"
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, editable=False, null=True, verbose_name="deleted at"
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True, max_length=255, unique=True, verbose_name="slug"
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="categories/%Y/%m/",
                        verbose_name="image",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, verbose_name="display order"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "meta_title",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="meta title"
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(blank=True, verbose_name="meta description"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="products.category",
                        verbose_name="parent category",
                    ),
                ),
                (
                    "store",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="stores.store",
                        verbose_name="store",
                    ),
                ),
            ],
            options={
                "verbose_name": "category",
                "verbose_name_plural": "categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="created"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="updated"),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="is deleted"
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, editable=False, null=True, verbose_name="deleted at"
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True, max_length=255, unique=True, verbose_name="slug"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=255, verbose_name="name"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed product description",
                        verbose_name="description",
                    ),
                ),
                (
                    "short_description",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="short description"
                    ),
                ),
                (
                    "retail_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Regular price for retail customers (B2C)",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="retail price",
                    ),
                ),
                (
                    "wholesale_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Special price for wholesale customers (B2B, optional)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="wholesale price",
                    ),
                ),
                (
                    "discount_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Sale price (optional)",
                        max_digits=10,
                        null=True,
                        verbose_name="discount price",
                    ),
                ),
                (
                    "compare_at_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Original price to show discount",
                        max_digits=10,
                        null=True,
                        verbose_name="compare at price",
                    ),
                ),
                (
                    "cost_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Cost price for profit analysis (internal)",
                        max_digits=10,
                        null=True,
                        verbose_name="cost price",
                    ),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Available quantity in stock",
                        verbose_name="stock quantity",
                    ),
                ),
                (
                    "available",
                    models.BooleanField(
                        db_index=True, default=True, verbose_name="available"
                    ),
                ),
                (
                    "sku",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Stock Keeping Unit (article number)",
                        max_length=100,
                        verbose_name="SKU",
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="barcode"
                    ),
                ),
                (
                    "track_stock",
                    models.BooleanField(default=True, verbose_name="track stock"),
                ),
                (
                    "specifications",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Product specifications as JSON",
                        verbose_name="specifications",
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="rating",
                    ),
                ),
                (
                    "reviews_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="reviews count"
                    ),
                ),
                (
                    "views_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times product was viewed",
                        verbose_name="views",
                    ),
                ),
                (
                    "sales_count",
                    models.PositiveIntegerField(default=0, verbose_name="sales count"),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="meta title"
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(blank=True, verbose_name="meta description"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="products",
                        to="products.category",
                        verbose_name="category",
                    ),
                ),
                (
                    "store",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="stores.store",
                        verbose_name="store",
                    ),
                ),
            ],
            options={
                "verbose_name": "product",
                "verbose_name_plural": "products",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to="products/%Y/%m/", verbose_name="image"
                    ),
                ),
                (
                    "is_main",
                    models.BooleanField(default=False, verbose_name="main image"),
                ),
                ("order", models.PositiveIntegerField(default=0, verbose_name="order")),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="alt text"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="products.product",
                        verbose_name="product",
                    ),
                ),
            ],
            options={
                "verbose_name": "product image",
                "verbose_name_plural": "product images",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="ProductReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="created"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="updated"),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)],
                        help_text="Rating from 1 to 5 stars",
                        verbose_name="rating",
                    ),
                ),
                (
                    "comment",
                    models.TextField(help_text="Your review", verbose_name="comment"),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, verbose_name="verified purchase"
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(default=True, verbose_name="approved"),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="products.product",
                        verbose_name="product",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "product review",
                "verbose_name_plural": "product reviews",
                "ordering": ["-created"],
            },
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(fields=["slug"], name="products_ca_slug_da4386_idx"),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["is_active"], name="products_ca_is_acti_a2d000_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["store", "parent"], name="products_ca_store_i_a1544e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["slug"], name="products_pr_slug_3edc0c_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["sku"], name="products_pr_sku_ca0cdc_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["available", "-created"], name="products_pr_availab_ea4799_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["-rating", "-reviews_count"],
                name="products_pr_rating_ec48c2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["store", "category"], name="products_pr_store_i_601a8e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="productreview",
            unique_together={("product", "user")},
        ),
    ]
