# ============================================
# requirements.txt
# ============================================
# Этот файл содержит список всех Python библиотек (пакетов),
# которые нужны для работы нашего интернет-магазина DeepReef.
# 
# Каждая строка — это одна библиотека с указанием версии.
# Формат: название_пакета>=минимальная_версия
# Символ >= означает "версия не ниже указанной"
# ============================================

# ============================================
# ОСНОВА — Django Framework
# ============================================

# Django — это web-framework (веб-фреймворк) на Python.
# Фреймворк — это готовый набор инструментов для создания сайтов.
# Django содержит: ORM (для работы с базой данных), систему URL,
# шаблоны, админ-панель и многое другое.
# Версия 5.1 — самая современная на момент 2025 года.
Django>=5.1

# ============================================
# БАЗА ДАННЫХ
# ============================================

# psycopg2-binary — это драйвер для PostgreSQL базы данных.
# Драйвер — это программа, которая позволяет Python общаться с PostgreSQL.
# Без этого пакета Django не сможет подключиться к PostgreSQL.
# "binary" означает, что это готовая скомпилированная версия (проще устанавливается).
psycopg2-binary>=2.9.9

# ============================================
# РАБОТА С ИЗОБРАЖЕНИЯМИ
# ============================================

# Pillow — библиотека для работы с изображениями (фото товаров).
# Она умеет: открывать, изменять размер, обрезать, конвертировать форматы.
# Django использует Pillow для ImageField (поля с картинками в моделях).
Pillow>=11.0.0

# ============================================
# ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ (секреты)
# ============================================

# django-environ — помогает работать с .env файлом.
# .env файл — это специальный файл, где хранятся секретные данные:
# пароли от базы данных, секретные ключи, API токены.
# Мы НЕ загружаем .env в Git (для безопасности).
django-environ>=0.11.2

# ============================================
# API (для связи с React фронтендом)
# ============================================

# Django REST Framework (DRF) — создаёт REST API.
# REST API — это способ общения между frontend (React) и backend (Django).
# Frontend отправляет HTTP запросы (GET, POST, PUT, DELETE),
# а DRF обрабатывает их и возвращает данные в формате JSON.
djangorestframework>=3.15.0

# django-cors-headers — разрешает Cross-Origin запросы.
# По умолчанию браузер блокирует запросы с одного домена на другой
# (например, с localhost:3000 на localhost:8000).
# CORS headers разрешают это. Без этого пакета React не сможет
# общаться с Django API.
django-cors-headers>=4.5.0

# drf-spectacular — автоматически создаёт документацию API.
# Это создаёт интерактивную веб-страницу (Swagger UI),
# где можно посмотреть все endpoints (пути API) и протестировать их.
# Очень удобно для разработки и тестирования API.
drf-spectacular>=0.27.0

# djangorestframework-simplejwt — JWT аутентификация.
# JWT (JSON Web Token) — это современный способ аутентификации.
# Когда пользователь логинится, сервер выдаёт ему токен (строку).
# Пользователь отправляет этот токен с каждым запросом,
# и сервер проверяет "это действительно авторизованный пользователь".
# JWT безопаснее, чем сессии (cookies).
djangorestframework-simplejwt>=5.3.0

# ============================================
# ФИЛЬТРАЦИЯ И ПОИСК
# ============================================

# django-filter — добавляет фильтрацию в API.
# Например: показать товары дешевле 5000₽, или только красного цвета.
# Пользователь на сайте выбирает фильтры, а этот пакет
# автоматически фильтрует результаты из базы данных.
django-filter>=24.3

# ============================================
# ПЛАТЕЖИ
# ============================================

# stripe — библиотека для приёма платежей через Stripe.
# Stripe — это сервис для онлайн-платежей (как PayPal).
# С помощью этой библиотеки мы можем:
# - создавать платежи
# - обрабатывать карты покупателей
# - получать уведомления о статусе платежа (webhook)
stripe>=11.0.0

# ============================================
# КЭШИРОВАНИЕ (ускорение сайта)
# ============================================

# redis — клиент для Redis базы данных.
# Redis — это быстрая in-memory база данных (хранит данные в памяти).
# Используется для кэширования (сохранение часто запрашиваемых данных),
# чтобы сайт работал быстрее. Например: список категорий товаров
# можно закэшировать, чтобы не читать из PostgreSQL каждый раз.
redis>=5.0.0

# django-redis — интеграция Redis с Django.
# Позволяет Django использовать Redis для:
# - кэширования данных
# - хранения сессий пользователей
# - очередей задач (Celery)
django-redis>=5.4.0

# ============================================
# АСИНХРОННЫЕ ЗАДАЧИ
# ============================================

# celery — библиотека для выполнения задач в фоне.
# Например: отправка email с подтверждением заказа.
# Если отправлять email прямо при оформлении заказа,
# пользователь будет ждать 2-3 секунды. С Celery мы говорим:
# "отправь email в фоне", и пользователь сразу видит страницу "Заказ оформлен".
# Celery выполнит задачу позже, не блокируя пользователя.
celery>=5.4.0

# ============================================
# БЕЗОПАСНОСТЬ И RATE LIMITING
# ============================================

# django-ratelimit — ограничивает количество запросов.
# Rate limiting — это защита от спама и DDoS атак.
# Например: один пользователь может отправить максимум
# 5 запросов в минуту к API регистрации.
# Это защищает от ботов и злоумышленников.
django-ratelimit>=4.1.0

# ============================================
# ОБЛАЧНОЕ ХРАНИЛИЩЕ (для продакшена)
# ============================================

# django-storages — поддержка облачных хранилищ (S3, Google Cloud).
# В продакшене (на реальном сервере) мы не храним фото товаров
# на самом сервере. Мы загружаем их в облако (Amazon S3).
# Это быстрее, надёжнее и дешевле.
django-storages>=1.14.0

# boto3 — SDK для работы с Amazon Web Services (AWS).
# Если используем Amazon S3 для хранения фото товаров,
# нужен этот пакет. Он позволяет загружать/скачивать файлы из S3.
boto3>=1.35.0

# ============================================
# РАСШИРЕНИЯ DJANGO
# ============================================

# django-extensions — дополнительные команды для manage.py.
# Добавляет удобные команды для разработки, например:
# - shell_plus (улучшенная консоль Python)
# - show_urls (показать все URL маршруты)
# - generate_secret_key (создать секретный ключ)
django-extensions>=3.2.0

# ============================================
# ИНСТРУМЕНТЫ ДЛЯ РАЗРАБОТКИ (Development only)
# ============================================

# django-debug-toolbar — панель для отладки Django.
# Показывает: сколько SQL запросов выполнилось, время загрузки,
# использованные шаблоны, кэш и т.д.
# ⚠️ ВАЖНО: Используется только во время разработки!
# На продакшене (реальном сайте) его нужно отключить.
django-debug-toolbar>=4.4.0

# black — автоматическое форматирование кода Python.
# Делает код красивым и единообразным.
# Команда: black . (отформатирует все .py файлы в проекте).
# Все разработчики Python используют black.
black>=24.0.0

# ruff — супер-быстрый линтер для Python.
# Линтер проверяет код на ошибки и плохие практики.
# Например: неиспользуемые импорты, неправильные названия переменных.
# ruff заменяет старые инструменты: flake8, pylint, isort.
ruff>=0.6.0

# ============================================
# ТЕСТИРОВАНИЕ
# ============================================

# pytest — современный фреймворк для тестирования.
# Тесты — это автоматические проверки, что код работает правильно.
# Например: тест "при добавлении товара в корзину, цена пересчитывается".
# pytest проще и удобнее, чем встроенный unittest в Python.
pytest>=8.3.0

# pytest-django — интеграция pytest с Django.
# Добавляет специальные функции для тестирования Django:
# доступ к базе данных, клиент для тестирования views и т.д.
pytest-django>=4.9.0

# factory-boy — создание тестовых данных.
# Вместо того чтобы каждый раз вручную создавать тестовые объекты:
# user = User(username='test', email='test@test.com')
# Мы пишем: user = UserFactory()
# И factory-boy автоматически создаёт пользователя с валидными данными.
factory-boy>=3.3.0

# ============================================
# ДОПОЛНИТЕЛЬНЫЕ УТИЛИТЫ
# ============================================

# python-slugify — создание URL-friendly строк (slug).
# Превращает "Маска для дайвинга Cressi" → "maska-dlya-dayvinga-cressi"
# Slug используется в URL товаров: /products/maska-dlya-dayvinga-cressi/
python-slugify>=8.0.0

# ============================================
# КАК УСТАНОВИТЬ ВСЕ ЭТИ ПАКЕТЫ?
# ============================================
# 
# 1. Создайте виртуальное окружение (изолированная среда для проекта):
#    python -m venv venv
#
# 2. Активируйте виртуальное окружение:
#    Windows: venv\Scripts\activate
#    Mac/Linux: source venv/bin/activate
#
# 3. Установите все пакеты из этого файла одной командой:
#    pip install -r requirements.txt
#
# Это скачает и установит все библиотеки автоматически!
# ============================================

#  Тесты
pytest==7.4.3
pytest-django==4.7.0
pytest-cov==4.1.0
factory-boy==3.3.0
faker==20.1.0