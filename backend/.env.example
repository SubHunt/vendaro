# ============================================
# .env.example — Шаблон переменных окружения
# ============================================
# Это ШАБЛОН. Скопируйте этот файл в .env и заполните реальными данными:
# cp .env.example .env
#
# ВАЖНО: Файл .env НЕ загружается в Git (он в .gitignore)!
# В .env будут ваши реальные пароли и секреты.
# ============================================

# ============================================
# DJANGO НАСТРОЙКИ
# ============================================

# SECRET_KEY — секретный ключ Django для шифрования (криптография, сессии, CSRF).
# Это ОЧЕНЬ важно для безопасности! Должен быть длинным и случайным.
# Генерация: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=your-secret-key-here-change-this-in-production

# DEBUG — режим отладки.
# True = показывает подробные ошибки (только для разработки!)
# False = скрывает ошибки (для продакшена, безопасность)
DEBUG=True

# ALLOWED_HOSTS — список доменов, которым разрешён доступ к Django.
# Для разработки: localhost,127.0.0.1
# Для продакшена: deepreef.ru,www.deepreef.ru,api.deepreef.ru
ALLOWED_HOSTS=localhost,127.0.0.1

# ENVIRONMENT — окружение (development, production, staging)
ENVIRONMENT=development

# ============================================
# БАЗА ДАННЫХ PostgreSQL
# ============================================

# DATABASE_URL — строка подключения к PostgreSQL.
# Формат: postgresql://[пользователь]:[пароль]@[хост]:[порт]/[имя_базы]
#
# Для разработки (локально):
DATABASE_URL=postgresql://deepreef_user:your_password@localhost:5432/deepreef_db
#
# Для продакшена (managed сервис):
# DATABASE_URL=postgresql://user:password@db.example.com:5432/production_db

# Или отдельные параметры (если не используете DATABASE_URL):
DB_NAME=deepreef_db
DB_USER=deepreef_user
DB_PASSWORD=your_password
DB_HOST=localhost
DB_PORT=5432

# ============================================
# REDIS (кэширование и Celery)
# ============================================

# REDIS_URL — подключение к Redis серверу.
# Используется для: кэширование данных, сессии, очереди Celery
#
# Локально:
REDIS_URL=redis://localhost:6379/0
#
# Продакшен (managed Redis):
# REDIS_URL=redis://username:password@redis.example.com:6379/0

# ============================================
# CELERY (асинхронные задачи)
# ============================================

# CELERY_BROKER_URL — брокер сообщений для Celery (обычно Redis)
CELERY_BROKER_URL=redis://localhost:6379/0

# CELERY_RESULT_BACKEND — где Celery хранит результаты задач
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# ============================================
# EMAIL (отправка писем)
# ============================================

# EMAIL_BACKEND — бэкенд для отправки email
# Для разработки (письма в консоль):
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
# Для продакшена (SMTP):
# EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

# SMTP настройки (для продакшена)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password

# Отправитель по умолчанию
DEFAULT_FROM_EMAIL=noreply@deepreef.ru

# ============================================
# STRIPE (платежи)
# ============================================

# STRIPE_PUBLIC_KEY — публичный ключ (можно показывать на фронтенде)
# Тестовый режим начинается с pk_test_
# Продакшен начинается с pk_live_
STRIPE_PUBLIC_KEY=pk_test_your_public_key_here

# STRIPE_SECRET_KEY — секретный ключ (НИКОГДА не показывать на фронтенде!)
# Тестовый режим начинается с sk_test_
# Продакшен начинается с sk_live_
STRIPE_SECRET_KEY=sk_test_your_secret_key_here

# STRIPE_WEBHOOK_SECRET — секрет для проверки webhook от Stripe
# Получаете в Stripe Dashboard → Webhooks
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# ============================================
# AWS S3 (облачное хранилище для фото товаров)
# ============================================
# Используется в продакшене для хранения media файлов (фото товаров)

# USE_S3 — использовать S3 или локальное хранилище
# True = S3 (продакшен), False = локально (разработка)
USE_S3=False

# AWS credentials
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_STORAGE_BUCKET_NAME=deepreef-media
AWS_S3_REGION_NAME=eu-central-1

# AWS S3 настройки
AWS_S3_CUSTOM_DOMAIN=cdn.deepreef.ru
AWS_DEFAULT_ACL=public-read

# ============================================
# CORS (Cross-Origin Resource Sharing)
# ============================================
# Разрешает фронтенду (Next.js) общаться с бэкендом (Django)

# CORS_ALLOWED_ORIGINS — список разрешённых доменов фронтенда
# Для разработки:
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
# Для продакшена:
# CORS_ALLOWED_ORIGINS=https://deepreef.ru,https://www.deepreef.ru

# ============================================
# FRONTEND (Next.js)
# ============================================

# NEXT_PUBLIC_API_URL — URL Django API (видна на фронтенде)
# Для разработки:
NEXT_PUBLIC_API_URL=http://localhost:8000/api
# Для продакшена:
# NEXT_PUBLIC_API_URL=https://api.deepreef.ru

# NEXT_PUBLIC_STRIPE_PUBLIC_KEY — публичный ключ Stripe для фронтенда
NEXT_PUBLIC_STRIPE_PUBLIC_KEY=pk_test_your_public_key_here

# ============================================
# JWT ТОКЕНЫ (аутентификация)
# ============================================

# JWT_ACCESS_TOKEN_LIFETIME — время жизни access токена (в минутах)
JWT_ACCESS_TOKEN_LIFETIME=60

# JWT_REFRESH_TOKEN_LIFETIME — время жизни refresh токена (в днях)
JWT_REFRESH_TOKEN_LIFETIME=7

# ============================================
# БЕЗОПАСНОСТЬ (для продакшена)
# ============================================

# SECURE_SSL_REDIRECT — перенаправлять HTTP на HTTPS
# False для разработки, True для продакшена
SECURE_SSL_REDIRECT=False

# CSRF_COOKIE_SECURE — CSRF cookie только через HTTPS
CSRF_COOKIE_SECURE=False

# SESSION_COOKIE_SECURE — сессии только через HTTPS
SESSION_COOKIE_SECURE=False

# ============================================
# ЛОГИРОВАНИЕ И МОНИТОРИНГ
# ============================================

# SENTRY_DSN — URL для отправки ошибок в Sentry (опционально)
# Sentry собирает и показывает ошибки в продакшене
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# ============================================
# РАЗРАБОТКА
# ============================================

# DJANGO_DEBUG_TOOLBAR — показывать панель отладки Django
DJANGO_DEBUG_TOOLBAR=True

# ============================================
# КАК ИСПОЛЬЗОВАТЬ:
# ============================================
# 1. Скопируйте этот файл:
#    cp .env.example .env
#
# 2. Откройте .env и замените все "your-..." на реальные данные
#
# 3. Сгенерируйте SECRET_KEY:
#    python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
#
# 4. Создайте PostgreSQL базу:
#    createdb deepreef_db
#    createuser deepreef_user -P
#
# 5. Никогда не загружайте .env в Git!
# ============================================